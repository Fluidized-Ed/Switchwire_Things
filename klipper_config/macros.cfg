[gcode_macro tune_pa]
gcode:
    SET_VELOCITY_LIMIT ACCEL=500
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=0.005

[gcode_macro Show_off]
gcode: 
    G4 P10000
    LIGHTS_ON
    G28
    Park_toolhead
    G4 P2000
    LIGHTS_OFF

[idle_timeout]
gcode:
    TURN_OFF_HEATERS
    DISABLE_MOTORS
    LIGHTS_OFF

[gcode_macro MEASURE_RESONNANCES_X]
gcode: 
    RESPOND PREFIX= MSG="Homing"
    G28
    Dock_probe
    RESPOND PREFIX= MSG="Measuring resonnances on X Axis"
    SHAPER_CALIBRATE AXIS=X
    Park_toolhead

[gcode_macro MEASURE_RESONNANCES_Y]
gcode: 
    RESPOND PREFIX= MSG="Homing"
    G28
    Dock_probe
    RESPOND PREFIX= MSG="Measuring resonnances on Y Axis"
    SHAPER_CALIBRATE AXIS=Y
    Park_toolhead

[gcode_macro PROBE_POINT]
gcode:
    Attach_probe
    PROBE samples=3 SAMPLE_RETRACT_DIST=1
    G0 Z4 F9000

[gcode_macro Screws_tilt]
gcode:
    {% set travel_speed = printer["gcode_macro GlobalVariables"].travel_speed %}
    {% set home_x = printer["gcode_macro GlobalVariables"].home_x %}
    {% set probe_x_offset = printer["gcode_macro GlobalVariables"].probe_x_offset %}
    {% set BED_TEMP = params.BED_TEMP|default(80)|float %}

    # Start bed heating and wait
    RESPOND PREFIX= MSG="Waiting for bed temperature..."
    M140 S{BED_TEMP}
    {% if printer.toolhead.homed_axes != 'xyz' %}
		G28	             #Home All Axes
	{% endif %}
    G4 P15000
    M190 S{BED_TEMP}
    Attach_probe
    SCREWS_TILT_CALCULATE samples=3
    G1 X{ home_x - probe_x_offset } Y230 Z200 F{ travel_speed }

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
default_parameter_X: 230
default_parameter_Y: 230
default_parameter_Z: 10
gcode:
    M104 S0
    M140 S0
    M106 S0
    G91 E-2
    CLEAR_PAUSE
    BASE_CANCEL_PRINT
    Park_toolhead
    SDCARD_RESET_FILE
    M221 S100
    BED_MESH_CLEAR

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
default_parameter_X: 230
default_parameter_Y: 230
default_parameter_Z: 10
gcode:
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-1.7 F2100
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F6000
    G91

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    G91
    G1 E1.7 F2100
    G91
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME

[gcode_macro DISABLE_MOTORS]
gcode:
    M18

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}

[gcode_macro change_filament]
default_parameter_X: 55
default_parameter_Y: -15
default_parameter_Z: 30
default_parameter_E: -100

gcode:
    {% set EXTRUDER = params.EXTRUDER|default(235)|float %}

    M104 S{EXTRUDER}     #set hotend temperature and wait
    {% if printer.toolhead.homed_axes != 'xyz' %}
		G28	             #Home All Axes
	{% endif %}

    G0 X{X} Y{Y} Z{Z}    #move to area where you can easily load filament
    M109 S{EXTRUDER}     
    M83                  #relative positioning on extruder
    G0 E15 F400          #extrude filament to get better blob on end
    G0 E-100 F1000       #unload filament
    G4 P15000            #wait for filament change 30 seconds
    RESPOND PREFIX= MSG="15 seconds left"
    G4 P15000
    G92 E0
    M83                  #relative positioning on extruder    
    G0 E150 F400         #prime extruder
    G92 E0

[gcode_macro LIGHTS_ON]
gcode:
#    SET_LED LED=enclosure_leds RED=0.2 GREEN=0.2 BLUE=0.2
#    G4 P200
#    SET_LED LED=enclosure_leds RED=0 GREEN=0 BLUE=0
#    G4 P25
#    SET_LED LED=enclosure_leds RED=0.2 GREEN=0.2 BLUE=0.2
#    G4 P25
#    SET_LED LED=enclosure_leds RED=0 GREEN=0 BLUE=0
#    G4 P25
#    SET_LED LED=enclosure_leds RED=0.2 GREEN=0.2 BLUE=0.2
#    G4 P25
#    SET_LED LED=enclosure_leds RED=0 GREEN=0 BLUE=0
#    G4 P25
#    SET_LED LED=enclosure_leds RED=0.2 GREEN=0.2 BLUE=0.2
#    G4 P25
#    SET_LED LED=enclosure_leds RED=0 GREEN=0 BLUE=0
#    G4 P25
#    SET_LED LED=enclosure_leds RED=0.2 GREEN=0.2 BLUE=0.2
#    G4 P25
#    SET_LED LED=enclosure_leds RED=0 GREEN=0 BLUE=0
#    G4 P25
#    SET_LED LED=enclosure_leds RED=0.2 GREEN=0.2 BLUE=0.2
#    G4 P25
#    SET_LED LED=enclosure_leds RED=0 GREEN=0 BLUE=0
#    G4 P25
#    SET_LED LED=enclosure_leds RED=0.2 GREEN=0.2 BLUE=0.2
#    G4 P25
#    SET_LED LED=enclosure_leds RED=0 GREEN=0 BLUE=0
#    G4 P25
#    SET_LED LED=enclosure_leds RED=0.2 GREEN=0.2 BLUE=0.2
#    G4 P25
#    SET_LED LED=enclosure_leds RED=0 GREEN=0 BLUE=0
#    G4 P25
#    SET_LED LED=enclosure_leds RED=0.2 GREEN=0.2 BLUE=0.2
#    G4 P25
#    SET_LED LED=enclosure_leds RED=0 GREEN=0 BLUE=0
#    G4 P25
#    SET_LED LED=enclosure_leds RED=0.2 GREEN=0.2 BLUE=0.2
#    G4 P25
#    SET_LED LED=enclosure_leds RED=0 GREEN=0 BLUE=0
#    G4 P300
    SET_LED LED=enclosure_leds RED=0.95 GREEN=1 BLUE=0.5

[gcode_macro LIGHTS_OFF]
gcode:
    SET_LED LED=enclosure_leds RED=0 GREEN=0 BLUE=0

[gcode_macro clean_nozzzle]
default_parameter_X: 55
default_parameter_Y: -15
default_parameter_Z: 75
default_parameter_E: -100

gcode:
    {% set EXTRUDER = params.EXTRUDER|default(240)|float %}

    M104 S{EXTRUDER}     #set hotend temperature and wait
    {% if printer.toolhead.homed_axes != 'xyz' %}
		G28	             #Home All Axes
	{% endif %}

    G0 X{X} Y{Y} Z{Z}    #move to area where you can easily load filament
    M109 S{EXTRUDER}

#
# Parametric PRIME LINE macro.
#
# Purges a set amounf of filament, then prints a nozzle priming line at the front of the bed.
# Calculates plastic flow and line size automatically based on nozzle diameter and bed size.
#
# Most of the apects of how it does things are configurable, see the "params.SOMETHING" lines in the code below.
# Full list of accepted parameters and their default values below. All of them are optional and do not have to be specified if you don't want the values changed:
#
#  PRIME_LINE
#  PRIME_LINE XPAD=0 YPAD=0 LENGTH=150 PRINT_SPEED=30 TRAVEL_SPEED=200 PURGE=8 RETRACT=1 EXTRUSION_MULTIPLIER=1.25 PRINT_HANDLE=1 HANDLE_FAN=35
#
# Careful: prints close to bed. Make sure your z-offset is correctly set and your bed mesh loaded, otherwise
# you can damage your print surface.
#
# Version 1.2
#
[gcode_macro PRIME_LINE]
description: Print an easy to remove parametric extruder priming line with a built-in handle.
gcode:
    # settings
    {% set line = {
      'x_padding'      : params.XPAD|default(0)|float,  # left/right padding around the bed the line can't print into
      'y_padding'      : params.YPAD|default(0)|float,  # top/bottom padding around the bed the line can't print into
      'initial_purge'  : params.PURGE|default(8)|int,   # mm of filament to purge before printing. set to 0 to disable
      'retract_after'  : params.RETRACT|default(1)|int, # mm of filament to recract after printing. set to 0 to disable
      'length'         : params.LENGTH|default(150)|int,
      'print_speed'    : params.PRINT_SPEED|default(30)|int,
      'travel_speed'   : params.TRAVEL_SPEED|default(200)|int,
      'extr_multi'     : params.EXTRUSION_MULTIPLIER|default(1.25)|float,  # apply to prime lines
      'overlap_percent': 80, # how much prime lines overlap each other
    } %}
    {% set handle = {
      'do_print'    : params.PRINT_HANDLE|default(1)|int,  # set to 0 to disable printing the handle
      'fan_percent' : params.HANDLE_FAN|default(40)|int,   # without fan the handle is too small and melty to print upright
      'width'       : 5.0,
      'height'      : 5.0,
      'move_away'   : 60   # how much to move the toolhead away from the printed handle once done. set 0 to disable
    } %}

    # sanity check and computed variables
    {% set max_x, max_y, nozzle_diameter = printer.toolhead.axis_maximum.x|float, printer.toolhead.axis_maximum.y|float, printer.configfile.config['extruder'].nozzle_diameter|float %}
    {% set _ = line.update({'width': nozzle_diameter * 1.25, 'height': nozzle_diameter / 2, 'length': [line.length, max_x - 2 * line.x_padding - 2]|min}) %}
    {% set _ = line.update({'e_per_mm': line.extr_multi * (line.width * line.height) / (3.1415 * (1.75/2)**2), 'x_start': max_x / 2 - line.length / 2, 'y_start': line.y_padding + range(0,5)|random})  %}

    SAVE_GCODE_STATE NAME=STATE_PRIME_LINE

    M117 Prime Line
    G90 # absolute positioning
    G0 X{line.x_start} Y{line.y_start + (handle.width / 2)|int + 1} Z{line.height} F{line.travel_speed * 60} # move to starting position
    G91 # relative positioning
    G1 E{line.initial_purge} F{5 * 60} # extrude at ~12mm3/sec
    G0 F{line.print_speed * 60} # set print speed
    G1 X{line.length} E{line.length * line.e_per_mm} # print forward line
    G0 Y{line.width * line.overlap_percent / 100} # overlap forward line
    G1 X-{line.length / 2} E{(line.length / 2) * line.e_per_mm}  # print backward line for half the length

    # print a handle for easy removal
    {% if handle.do_print != 0 and handle.width != 0 and handle.height != 0 %}
      G0 X{line.length / 2 - handle.width} Y{handle.width / 2} F{line.travel_speed * 60} # move into position for printing handle
      G0 F{line.print_speed * 60} # set print speed
      {% set saved_fan_speed = (printer['fan'].speed * 256)|int %}
      M106 S{((handle.fan_percent / 100) * 256)|int} # set part fan to desired speed
      {% for _ in range((line.height * 1000)|int, (handle.height * 1000)|int, (line.height * 1000)|int) %} # loop however many cycles it takes to print required handle height
        G1 Y{loop.cycle(-1.0, 1.0) * handle.width} E{handle.width * line.e_per_mm} # handle layer
        G0 X-{line.width * 0.2} Z{line.height} # move up and shift the layer to make the handle sloping
      {% endfor %}
      M106 S{saved_fan_speed} # restore previous part fan speed
    {% endif %}
    
    G1 E-{line.retract_after} F{50 * 60} # retract ar 50mm/sec after printing
    G0 Y{handle.move_away} F{line.travel_speed * 60}
    M117

    RESTORE_GCODE_STATE NAME=STATE_PRIME_LINE
